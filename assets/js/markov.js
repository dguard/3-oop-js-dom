//@ sourceMappingURL=markov.map
// Generated by CoffeeScript 1.6.1
(function() {
  "use strict";
  var App, Generator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Generator = (function() {

    function Generator(config) {
      this.dict = {
        article: new Dict,
        comment: new Dict
      };
      this.libs = {
        forbiddenLastWords: config.libs.forbiddenLastWords,
        nicknames: []
      };
      this.configure(config);
      this.init();
    }

    Generator.prototype.configure = function(config, firstInit) {
      if (firstInit == null) {
        firstInit = true;
      }
      this.config = {
        paragraphs: {
          min: +config.paragraphs.min > 0 ? +config.paragraphs.min : 6,
          max: +config.paragraphs.max > 0 ? +config.paragraphs.max : 20
        },
        sentences: {
          min: +config.sentences.min > 0 ? +config.sentences.min : 6,
          max: +config.sentences.max > 0 ? +config.sentences.max : 14
        },
        words: {
          min: +config.words.min > 0 ? +config.words.min : 9,
          max: +config.words.min > 0 ? +config.words.max : 17
        }
      };
      if (firstInit) {
        this.config.content = config.content;
        return this.config.npref = +config.npref > 0 ? +config.npref : 2;
      }
    };

    Generator.prototype.init = function() {
      var $articles, self;
      $articles = this.config.content.match(/<article>[\s\S]*?<\/article>/g);
      self = this;
      return $.map($articles, function(article) {
        var $article, $comments;
        $article = $(article);
        $comments = $article.find('.comment');
        $.map($comments, function(comment) {
          return self.parseComment($(comment));
        });
        return self.parseArticle($article.find('.comments').remove().end());
      });
    };

    Generator.prototype.removePre = function($el) {
      return $el.find('pre').remove().end();
    };

    Generator.prototype.parseComment = function($comment) {
      var words;
      $comment = this.removePre($comment);
      words = $comment.find('.message').text().split(/\s/).filter(function(item) {
        return item !== "";
      });
      return this.dict.comment.add(words, this.config.npref);
    };

    Generator.prototype.parseArticle = function($article) {
      var words;
      $article = this.removePre($article);
      words = $article.text().split(/\s/).filter(function(item) {
        return item !== "";
      });
      return this.dict.article.add(words, this.config.npref);
    };

    Generator.prototype.generateText = function(dict, minWords, maxWords) {
      var lastI, p, text;
      minWords--;
      maxWords--;
      text = [];
      dict.shuffle();
      while (dict.isValid) {
        text.push(dict.current());
        p = (text.length - minWords) / (maxWords - minWords);
        lastI = text.length - 1;
        if ((maxWords <= lastI || p > Math.random()) && text[lastI].match(/[^,:-]/)) {
          if (this.lastWordIsValid(text[lastI])) {
            if (text[lastI].match(/[^.!?]/)) {
              text.push('.');
            }
            break;
          } else {
            text.pop();
          }
        }
        dict.next();
      }
      return text.join(' ');
    };

    Generator.prototype.lastWordIsValid = function(word) {
      var _ref;
      return !(_ref = word.toLowerCase(), __indexOf.call(this.libs.forbiddenLastWords, _ref) >= 0);
    };

    Generator.prototype.generateTitle = function() {
      var text;
      text = this.generateText(this.dict.article, this.config.words.min, this.config.words.max);
      return text = this.purifyText(text);
    };

    Generator.prototype.generateArticle = function() {
      var i, pCount, sCount, temp, text, _i;
      pCount = Helper.getRandomInt(this.config.paragraphs.min, this.config.paragraphs.max);
      text = '';
      for (i = _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; i = 1 <= pCount ? ++_i : --_i) {
        sCount = Helper.getRandomInt(this.config.sentences.min, this.config.sentences.max);
        temp = this.generateText(this.dict.article, sCount * this.config.words.min, sCount * this.config.words.max);
        text += this.purifyText(temp);
        if (i !== pCount - 1) {
          text += "<br/><br/>";
        }
      }
      return text;
    };

    Generator.prototype.generateComment = function() {
      var i, pCount, sCount, temp, text, _i;
      pCount = Helper.getRandomInt(1, 2);
      text = '';
      for (i = _i = 1; 1 <= pCount ? _i <= pCount : _i >= pCount; i = 1 <= pCount ? ++_i : --_i) {
        sCount = Helper.getRandomInt(this.config.sentences.min, this.config.sentences.max);
        temp = this.generateText(this.dict.comment, sCount * this.config.words.min, sCount * this.config.words.max);
        text += this.purifyText(temp) + "<br/><br/>";
      }
      return text;
    };

    Generator.prototype.purifyText = function(text) {
      text = text.replace(/(?:(?:https?|ftp):\/\/)*(?:www.|ftp.)*[А-я\w.-]+\.[A-z]{2,4}/gi, '');
      text = text.replace(/&\w+;|&#\d+;/g, ' ');
      text = text.replace(/([!?.:,—])/g, ' $1 ');
      text = text.replace(/<\/?[^>]+>/g, '');
      text = text.replace(/(т . е .|т . к .|т . п .|т . д .|т . о .|с . м .|д . р .)/g, function(result) {
        switch (result) {
          case 'т . е .':
            return 'то есть';
          case 'т . к .':
            return 'так как';
          case 'т . п .':
            return 'тому подобное';
          case 'т . д .':
            return 'так далее.';
          case 'т . о .':
            return 'таким образом';
          case 'с . м .':
            return 'смотрите';
          case 'д . р .':
            return 'другое';
        }
      });
      text = text.replace(/\s+([!?.:,])/g, '$1');
      text = text.replace(/[^A-zА-яёЁ0-9\s!?.,:\-—<>#]/g, '');
      text = text.replace(/([!?.:,—]\s?)+[!?.:,—]/g, '');
      text = text.replace(/\s+/g, ' ');
      text = text.replace(/<br\/>[a-zа-яё]/g, function(firstChart) {
        return firstChart.toUpperCase();
      });
      text = text.replace(/(?:^\s*|[!?.]\s)[a-zа-яё]/g, function(result) {
        return result.toUpperCase();
      });
      return text;
    };

    Generator.prototype.generateImage = function(query) {
      return $.when($.ajax('http://ajax.googleapis.com/ajax/services/search/images', {
        crossDomain: true,
        data: {
          v: '1.0',
          rsz: 1,
          q: query
        },
        dataType: 'jsonp'
      })).then(this.onSuccessGenerateImage, this.onFailureGenerateImage);
    };

    Generator.prototype.onSuccessGenerateImage = function(data) {
      var $img;
      if (typeof data.responseData.results !== null) {
        data = data.responseData.results[0];
        if (data.width > 600) {
          data.width = '600';
        }
        $img = $('<img>', {
          src: data.url,
          width: data.width,
          alt: data.titleNoFormatting
        });
        return $('.content').prepend($img, '<br><br>');
      }
    };

    Generator.prototype.onFailureGenerateImage = function(e) {
      return alert('Произошла ошибка при получении данных с Google.com');
    };

    return Generator;

  })();

  App = (function() {

    function App() {
      this.$article = $('#article');
      this.view = {
        $title: this.$article.find('.post_title'),
        $content: this.$article.find('.content'),
        $author: this.$article.find('.author'),
        $createDate: this.$article.find('.createDate'),
        $commentsCount: this.$article.find('.comments_count'),
        $comments: this.$article.find('.comments_list'),
        $form: this.$article.find('form'),
        $runButton: $('.run-btn')
      };
      this.isRun = false;
      this.assignEvents();
    }

    App.prototype.assignEvents = function() {
      var self;
      self = this;
      return $(document).on('click', this.view.$runButton, function(e) {
        if (self.isRun) {
          return false;
        }
        self.isRun = true;
        self.runApp();
        return false;
      });
    };

    App.prototype.runApp = function() {
      if (!this.generator) {
        return $.when($.ajax('books/habr.html')).done($.proxy(this.onSuccessRun, this)).fail($.proxy(this.onFailRun, this)).always($.proxy(this.onAlwaysRun, this));
      } else {
        this.runWriter();
        return this.generator.configure(this.getConfig(''), false);
      }
    };

    App.prototype.onSuccessRun = function(content) {
      this.generator = new Generator(this.getConfig(content));
      this.runWriter();
      return this.$article.show();
    };

    App.prototype.onFailRun = function(data) {
      return alert("Произошла ошибка при загрузки статьи. Пожалуйста, повторите через несколько минут.");
    };

    App.prototype.onAlwaysRun = function() {};

    App.prototype.runWriter = function() {
      this.writeArticle();
      this.writeComments();
      return this.isRun = false;
    };

    App.prototype.writeArticle = function() {
      var title;
      this.view.$content.html(this.generator.generateArticle());
      title = this.generator.generateTitle();
      this.view.$title.html(title);
      return this.generator.generateImage(title);
    };

    App.prototype.writeComments = function() {
      var $comment, $comments, $emptyComment, count, i, message, _i;
      count = Helper.getRandomInt(10, 20);
      $emptyComment = this.$article.find('.comment_item').filter('.hidden');
      $comments = $();
      for (i = _i = 0; 0 <= count ? _i <= count : _i >= count; i = 0 <= count ? ++_i : --_i) {
        $comment = $emptyComment.clone();
        message = this.generator.generateComment();
        $comment.find('.message').html(message);
        $comments = $comments.add($comment);
      }
      $comments.removeClass('hidden');
      this.view.$commentsCount.text(count);
      return this.view.$comments.append($comments);
    };

    App.prototype.getConfig = function(content) {
      var config, form;
      form = this.view.$form;
      return config = {
        content: content,
        npref: form.find('[name=npref]').val(),
        words: {
          min: form.find('[name=words_min]').val(),
          max: form.find('[name=words_max]').val()
        },
        sentences: {
          min: form.find('[name=sentences_min]').val(),
          max: form.find('[name=sentences_max]').val()
        },
        paragraphs: {
          min: form.find('[name=paragraphs_min]').val(),
          max: form.find('[name=paragraphs_max]').val()
        },
        libs: {
          forbiddenLastWords: window.libs.forbiddenLastWords
        }
      };
    };

    return App;

  })();

  $(function() {
    return window.app = new App;
  });

}).call(this);
